name: 'Terraform_manual'
#Next 2 lines are for configuring the manual data action
#on :
# workflow_dispatch

on:
  push:
    branches: [ "main" ]
    
permissions:
  contents: read

jobs:
  terraform:
<<<<<<< HEAD

    if: github.ref == 'refs/heads/Dev_Org' then
    name: 'CICD2'
=======
    name: 'CICD'
>>>>>>> 6d17c9e8fd08ad119e5fea672809e4e7f0300452
    runs-on: ubuntu-latest
    environment: UK Lab
    
    
    if: github.ref == 'refs/heads/main'
    name: 'CICD'
    
    runs-on: ubuntu-latest
    environment: US Lab

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

 

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

 

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_SECRET}}

 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
